apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: bucketstatestores.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
      - kratix
    kind: BucketStateStore
    listKind: BucketStateStoreList
    plural: bucketstatestores
    singular: bucketstatestore
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: BucketStateStore is the Schema for the bucketstatestores API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: BucketStateStoreSpec defines the desired state of BucketStateStore
              properties:
                authMethod:
                  default: accessKey
                  description: |-
                    Authentication method used to access the StateStore.
                    Default to accessKey; options are accessKey and IAM.
                  enum:
                    - accessKey
                    - IAM
                  type: string
                bucketName:
                  description: Name of the bucket; required field.
                  type: string
                endpoint:
                  description: |-
                    Endpoint to access the bucket.
                    Required field.
                  type: string
                insecure:
                  description: Toggle to turn off or on SSL verification when connecting to the bucket.
                  type: boolean
                path:
                  description: |-
                    Path within the StateStore to write documents. This path should be allocated
                    to Kratix as it will create, update, and delete files within this path.
                    Path structure begins with provided path and ends with namespaced destination name:
                      <StateStore.Spec.Path>/<Destination.Spec.Path>/<Destination.Metadata.Namespace>/<Destination.Metadata.Name>/
                  type: string
                secretRef:
                  description: SecretRef specifies the Secret containing authentication credentials
                  properties:
                    name:
                      description: name is unique within a namespace to reference a secret resource.
                      type: string
                    namespace:
                      description: namespace defines the space within which the secret name must be unique.
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
              required:
                - bucketName
                - endpoint
              type: object
            status:
              description: BucketStateStoreStatus defines the observed state of BucketStateStore
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: destinations.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
      - kratix
    kind: Destination
    listKind: DestinationList
    plural: destinations
    singular: destination
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Destination is the Schema for the Destinations API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: DestinationSpec defines the desired state of Destination
              properties:
                filepath:
                  default:
                    mode: nestedByMetadata
                  description: The filepath mode to use when writing files to the destination.
                  properties:
                    mode:
                      description: |-
                        filepath.mode can be set to either:
                        - nestedByMetadata (default): files from the pipeline will be placed in a nested directory structure
                        - none: file from the pipeline will be placed in a flat directory structure
                        filepath.mode is immutable
                      enum:
                        - nestedByMetadata
                        - none
                      type: string
                      x-kubernetes-validations:
                        - message: filepath.mode is immutable
                          rule: self == oldSelf
                  type: object
                path:
                  description: |-
                    Path within the StateStore to write documents. This path should be allocated
                    to Kratix as it will create, update, and delete files within this path.
                    Path structure begins with provided path and ends with namespaced destination name:
                      <StateStore.Spec.Path>/<Destination.Spec.Path>/<Destination.Metadata.Namespace>/<Destination.Metadata.Name>/
                  type: string
                secretRef:
                  description: SecretRef specifies the Secret containing authentication credentials
                  properties:
                    name:
                      description: name is unique within a namespace to reference a secret resource.
                      type: string
                    namespace:
                      description: namespace defines the space within which the secret name must be unique.
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                stateStoreRef:
                  description: StateStoreReference is a reference to a StateStore
                  properties:
                    kind:
                      enum:
                        - BucketStateStore
                        - GitStateStore
                      type: string
                    name:
                      type: string
                  required:
                    - kind
                    - name
                  type: object
                strictMatchLabels:
                  description: |-
                    By default, Kratix will schedule works without labels to all destinations
                    (for promise dependencies) or to a random destination (for resource
                    requests). If StrictMatchLabels is true, Kratix will only schedule works
                    to this destination if it can be selected by the Promise's
                    destinationSelectors. An empty label set on the work won't be scheduled
                    to this destination, unless the destination label set is also empty
                  type: boolean
              type: object
            status:
              description: DestinationStatus defines the observed state of Destination
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: gitstatestores.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
      - kratix
    kind: GitStateStore
    listKind: GitStateStoreList
    plural: gitstatestores
    singular: gitstatestore
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: GitStateStore is the Schema for the gitstatestores API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: GitStateStoreSpec defines the desired state of GitStateStore
              properties:
                authMethod:
                  default: basicAuth
                  description: |-
                    Authentication method used to access the StateStore.
                    Default to basicAuth; options are basicAuth and ssh.
                  enum:
                    - basicAuth
                    - ssh
                  type: string
                branch:
                  default: main
                  description: Branch of the git repository; default to main.
                  type: string
                gitAuthor:
                  default:
                    name: kratix
                  description: Git author name and email used to commit this git state store; name defaults to 'kratix'
                  properties:
                    email:
                      type: string
                    name:
                      type: string
                  type: object
                path:
                  description: |-
                    Path within the StateStore to write documents. This path should be allocated
                    to Kratix as it will create, update, and delete files within this path.
                    Path structure begins with provided path and ends with namespaced destination name:
                      <StateStore.Spec.Path>/<Destination.Spec.Path>/<Destination.Metadata.Namespace>/<Destination.Metadata.Name>/
                  type: string
                secretRef:
                  description: SecretRef specifies the Secret containing authentication credentials
                  properties:
                    name:
                      description: name is unique within a namespace to reference a secret resource.
                      type: string
                    namespace:
                      description: namespace defines the space within which the secret name must be unique.
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                url:
                  description: URL of the git repository.
                  type: string
              type: object
            status:
              description: GitStateStoreStatus defines the observed state of GitStateStore
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: promisereleases.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
      - kratix
    kind: PromiseRelease
    listKind: PromiseReleaseList
    plural: promisereleases
    singular: promiserelease
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.status
          name: Status
          type: string
        - jsonPath: .spec.version
          name: Version
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: PromiseRelease is the Schema for the promisereleases API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: PromiseReleaseSpec defines the desired state of PromiseRelease
              properties:
                sourceRef:
                  default:
                    type: http
                  properties:
                    type:
                      enum:
                        - http
                      type: string
                    url:
                      type: string
                  required:
                    - type
                  type: object
                version:
                  type: string
              required:
                - sourceRef
              type: object
            status:
              description: PromiseReleaseStatus defines the observed state of PromiseRelease
              properties:
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                status:
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: kratix-platform-system/kratix-platform-serving-cert
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: promises.platform.kratix.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: kratix-platform-webhook-service
          namespace: kratix-platform-system
          path: /convert
      conversionReviewVersions:
        - v1alpha1
        - v1beta1
  group: platform.kratix.io
  names:
    categories:
      - kratix
    kind: Promise
    listKind: PromiseList
    plural: promises
    singular: promise
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.status
          name: Status
          type: string
        - jsonPath: .status.kind
          name: Kind
          type: string
        - jsonPath: .status.apiVersion
          name: API Version
          type: string
        - jsonPath: .status.version
          name: Version
          type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Promise is the Schema for the promises API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: PromiseSpec defines the desired state of Promise
              properties:
                api:
                  type: object
                  x-kubernetes-embedded-resource: true
                  x-kubernetes-preserve-unknown-fields: true
                dependencies:
                  items:
                    description: Resources represents the manifest workload to be deployed on Destinations
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  type: array
                destinationSelectors:
                  items:
                    description: For Promise spec
                    properties:
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  type: array
                requiredPromises:
                  items:
                    properties:
                      name:
                        description: Name of Promise
                        type: string
                      version:
                        description: Version of Promise
                        type: string
                    type: object
                  type: array
                workflows:
                  properties:
                    promise:
                      properties:
                        configure:
                          items:
                            type: object
                          type: array
                          x-kubernetes-preserve-unknown-fields: true
                        delete:
                          items:
                            type: object
                          type: array
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                    resource:
                      properties:
                        configure:
                          items:
                            type: object
                          type: array
                          x-kubernetes-preserve-unknown-fields: true
                        delete:
                          items:
                            type: object
                          type: array
                          x-kubernetes-preserve-unknown-fields: true
                      type: object
                  type: object
              type: object
            status:
              description: PromiseStatus defines the observed state of Promise
              properties:
                apiVersion:
                  type: string
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                kind:
                  type: string
                observedGeneration:
                  format: int64
                  type: integer
                requiredBy:
                  items:
                    properties:
                      promise:
                        properties:
                          name:
                            type: string
                          version:
                            type: string
                        type: object
                      requiredVersion:
                        type: string
                    type: object
                  type: array
                requiredPromises:
                  items:
                    properties:
                      name:
                        type: string
                      state:
                        type: string
                      version:
                        type: string
                    type: object
                  type: array
                status:
                  type: string
                version:
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: workplacements.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
      - kratix
    kind: WorkPlacement
    listKind: WorkPlacementList
    plural: workplacements
    singular: workplacement
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: WorkPlacement is the Schema for the workplacements API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: WorkPlacementSpec defines the desired state of WorkPlacement
              properties:
                id:
                  type: string
                promiseName:
                  type: string
                resourceName:
                  type: string
                targetDestinationName:
                  type: string
                workloads:
                  description: |-
                    List of Workloads scheduled to target Destination;
                    Each Workload details name of the filepath on Destination,
                    and the compressed content of the workload.
                  items:
                    description: Workload represents the manifest workload to be deployed on destination
                    properties:
                      content:
                        description: Content of the workload, which is base64 encoded and compressed with gzip.
                        type: string
                      filepath:
                        type: string
                    type: object
                  type: array
              type: object
            status:
              description: WorkPlacementStatus defines the observed state of WorkPlacement
              properties:
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
                versionID:
                  description: |-
                    VersionID contains the version identifier of the last applied workplacement
                    For Git StateStores, this is the SHA of the last applied commit
                    For Bucket StateStores, this is always empty
                  type: string
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  labels:
    app.kubernetes.io/component: kratix-manager
    app.kubernetes.io/instance: kratix-platform
    app.kubernetes.io/part-of: kratix
  name: works.platform.kratix.io
spec:
  group: platform.kratix.io
  names:
    categories:
      - kratix
    kind: Work
    listKind: WorkList
    plural: works
    singular: work
  scope: Namespaced
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: Work is the Schema for the works API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: WorkSpec defines the desired state of Work
              properties:
                promiseName:
                  type: string
                resourceName:
                  type: string
                workloadGroups:
                  description: Workload represents the manifest workload to be deployed on destination
                  items:
                    description: |-
                      WorkloadGroup represents the workloads in a particular directory that should
                      be scheduled to a Destination
                    properties:
                      destinationSelectors:
                        items:
                          properties:
                            matchLabels:
                              additionalProperties:
                                type: string
                              type: object
                            source:
                              type: string
                          type: object
                        type: array
                      directory:
                        type: string
                      id:
                        type: string
                      workloads:
                        description: |-
                          List of Workloads scheduled to target Destination;
                          Each Workload details name of the filepath on Destination,
                          and the compressed content of the workload.
                        items:
                          description: Workload represents the manifest workload to be deployed on destination
                          properties:
                            content:
                              description: Content of the workload, which is base64 encoded and compressed with gzip.
                              type: string
                            filepath:
                              type: string
                          type: object
                        type: array
                    type: object
                  type: array
              type: object
            status:
              description: WorkStatus defines the observed state of Work
              properties:
                conditions:
                  items:
                    description: "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}"
                    properties:
                      lastTransitionTime:
                        description: |-
                          lastTransitionTime is the last time the condition transitioned from one status to another.
                          This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                        type: string
                      message:
                        description: |-
                          message is a human readable message indicating details about the transition.
                          This may be an empty string.
                        maxLength: 32768
                        type: string
                      observedGeneration:
                        description: |-
                          observedGeneration represents the .metadata.generation that the condition was set based upon.
                          For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                          with respect to the current state of the instance.
                        format: int64
                        minimum: 0
                        type: integer
                      reason:
                        description: |-
                          reason contains a programmatic identifier indicating the reason for the condition's last transition.
                          Producers of specific condition types may define expected values and meanings for this field,
                          and whether the values are considered a guaranteed API.
                          The value should be a CamelCase string.
                          This field may not be empty.
                        maxLength: 1024
                        minLength: 1
                        pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        type: string
                      status:
                        description: status of the condition, one of True, False, Unknown.
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                        type: string
                      type:
                        description: |-
                          type of condition in CamelCase or in foo.example.com/CamelCase.
                          ---
                          Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                          useful (see .node.status.conditions), the ability to deconflict is important.
                          The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        maxLength: 316
                        pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                        type: string
                    required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                    type: object
                  type: array
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
