#!/usr/bin/env bash

set -euxo pipefail

function main(){
  root=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )

  MANIFEST_NAME="k8s-health-agent.yaml"
  CHART_CRDS=$root/k8s-health-agent/crds/platform_kratix_io_crds.yaml
  CHART_DISTRIBUTION=$root/k8s-health-agent/templates/distribution.yaml

  root=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )

  # Download the latest release manifest
  latest_release="$(gh release list --repo=syntasso/enterprise-kratix --exclude-pre-releases --order desc --json tagName --jq "[ .[] | select(.tagName | match(\"k8s-health-agent\")) ][0].tagName")"
  if [ -z "$latest_release" ]; then
    echo "No release found for $COMPONENT"
    exit 1
  fi

  gh release download --repo=syntasso/enterprise-kratix "$latest_release" --pattern "${MANIFEST_NAME}"

  yq 'select(.kind == "CustomResourceDefinition")' ${MANIFEST_NAME} > ${CHART_CRDS}
  yq 'select(.kind != "CustomResourceDefinition" and .kind != "ConfigMap")' ${MANIFEST_NAME} > ${CHART_DISTRIBUTION}

  # ensure to clean up the downloaded file
  trap "rm k8s-health-agent.yaml" EXIT

  export latest_version=${latest_release#"k8s-health-agent-"}

  # Bump current chart version (always a minor bump)
  current_chart_version="$(yq -r '.version' k8s-health-agent/Chart.yaml)"
  export new_chart_version="$(echo $current_chart_version | awk -F. '{$2 = $2 + 1;} 1' | sed 's/ /./g')"
  yq -i '.appVersion = strenv(latest_version) | .version = env(new_chart_version)' k8s-health-agent/Chart.yaml

  # Bump ske destination chart version (always a minor bump)
  current_chart_version="$(yq -r '.version' ske-destination/Chart.yaml)"
  export new_chart_version="$(echo $current_chart_version | awk -F. '{$2 = $2 + 1;} 1' | sed 's/ /./g')"
  yq -i '.version = env(new_chart_version)' ske-destination/Chart.yaml
  yq -i '.dependencies[1].version = env(new_chart_version)' ske-destination/Chart.yaml
}

main
